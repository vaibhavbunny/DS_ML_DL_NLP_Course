# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ncbi/datasets/v2/reports/taxonomy_names.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from ncbi.datasets.v2.reports import common_pb2 as ncbi_dot_datasets_dot_v2_dot_reports_dot_common__pb2
from ncbi.datasets.options import report_pb2 as ncbi_dot_datasets_dot_options_dot_report__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n-ncbi/datasets/v2/reports/taxonomy_names.proto\x12\x18ncbi.datasets.v2.reports\x1a%ncbi/datasets/v2/reports/common.proto\x1a\"ncbi/datasets/options/report.proto\"\x85\x03\n\x1bTaxonomyNamesDataReportPage\x12L\n\x07reports\x18\x01 \x03(\x0b\x32\x32.ncbi.datasets.v2.reports.TaxonomyNamesReportMatchR\x07reports\x12=\n\x08messages\x18\x02 \x03(\x0b\x32!.ncbi.datasets.v2.reports.MessageR\x08messages\x12\x1f\n\x0btotal_count\x18\x03 \x01(\rR\ntotalCount\x12&\n\x0fnext_page_token\x18\x04 \x01(\tR\rnextPageToken\x12!\n\x0c_report_type\x18\xf4\x03 \x01(\tR\nReportType\x12%\n\x0e_report_fields\x18\xf5\x03 \x03(\tR\x0cReportFields\x12\x1f\n\x0b_first_page\x18\xf6\x03 \x01(\x08R\tFirstPage\x12%\n\x0e_report_format\x18\xf7\x03 \x01(\tR\x0cReportFormat\"\xf5\x01\n\x18TaxonomyNamesReportMatch\x12M\n\x08taxonomy\x18\x01 \x01(\x0b\x32\x31.ncbi.datasets.v2.reports.TaxonomyNamesDescriptorR\x08taxonomy\x12\x14\n\x05query\x18\x02 \x03(\tR\x05query\x12;\n\x07warning\x18\x03 \x01(\x0b\x32!.ncbi.datasets.v2.reports.WarningR\x07warning\x12\x37\n\x06\x65rrors\x18\x04 \x03(\x0b\x32\x1f.ncbi.datasets.v2.reports.ErrorR\x06\x65rrors\"\xb4\x02\n\x14TaxonomyTypeMaterial\x12(\n\x10type_strain_name\x18\x01 \x01(\tR\x0etypeStrainName\x12$\n\x0etype_strain_id\x18\x03 \x01(\tR\x0ctypeStrainId\x12*\n\x11\x62io_collection_id\x18\x04 \x01(\tR\x0f\x62ioCollectionId\x12.\n\x13\x62io_collection_name\x18\x05 \x01(\tR\x11\x62ioCollectionName\x12Q\n\x0f\x63ollection_type\x18\x07 \x03(\x0e\x32(.ncbi.datasets.v2.reports.CollectionTypeR\x0e\x63ollectionType\x12\x1d\n\ntype_class\x18\x08 \x01(\tR\ttypeClass\"\xe9\t\n\x10NameAndAuthority\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\x12\x1c\n\tauthority\x18\x02 \x01(\tR\tauthority\x12q\n\x14\x61uthority_classifier\x18\x03 \x01(\x0e\x32>.ncbi.datasets.v2.reports.NameAndAuthority.AuthorityClassifierR\x13\x61uthorityClassifier\x12%\n\x0e\x61uthority_note\x18\x04 \x01(\tR\rauthorityNote\x12Q\n\x0ctype_strains\x18\x05 \x03(\x0b\x32..ncbi.datasets.v2.reports.TaxonomyTypeMaterialR\x0btypeStrains\x12\'\n\x0f\x63urator_synonym\x18\x06 \x01(\tR\x0e\x63uratorSynonym\x12Y\n\x12homotypic_synonyms\x18\x07 \x03(\x0b\x32*.ncbi.datasets.v2.reports.NameAndAuthorityR\x11homotypicSynonyms\x12]\n\x14heterotypic_synonyms\x18\x08 \x03(\x0b\x32*.ncbi.datasets.v2.reports.NameAndAuthorityR\x13heterotypicSynonyms\x12Q\n\x0eother_synonyms\x18\t \x03(\x0b\x32*.ncbi.datasets.v2.reports.NameAndAuthorityR\rotherSynonyms\x12%\n\x0einformal_names\x18\n \x03(\tR\rinformalNames\x12\x46\n\x08\x62\x61sionym\x18\x0b \x01(\x0b\x32*.ncbi.datasets.v2.reports.NameAndAuthorityR\x08\x62\x61sionym\x12Z\n\x0cpublications\x18\x0c \x03(\x0b\x32\x36.ncbi.datasets.v2.reports.NameAndAuthority.PublicationR\x0cpublications\x12\x45\n\x05notes\x18\r \x03(\x0b\x32/.ncbi.datasets.v2.reports.NameAndAuthority.NoteR\x05notes\x1a=\n\x0bPublication\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n\x08\x63itation\x18\x02 \x01(\tR\x08\x63itation\x1a\x92\x01\n\x04Note\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n\x04note\x18\x02 \x01(\tR\x04note\x12\x62\n\x0fnote_classifier\x18\x03 \x01(\x0e\x32\x39.ncbi.datasets.v2.reports.NameAndAuthority.NoteClassifierR\x0enoteClassifier\"p\n\x13\x41uthorityClassifier\x12\x1b\n\x17no_authority_classifier\x10\x00\x12\x12\n\x0e\x65\x66\x66\x65\x63tive_name\x10\x01\x12\x15\n\x11nomen_approbbatum\x10\x02\x12\x11\n\rictv_accepted\x10\x03\"(\n\x0eNoteClassifier\x12\x16\n\x12no_note_classifier\x10\x00\"\x96\x03\n\x17TaxonomyNamesDescriptor\x12\x15\n\x06tax_id\x18\x01 \x01(\x04R\x05taxId\x12\x36\n\x04rank\x18\x02 \x01(\x0e\x32\".ncbi.datasets.v2.reports.RankTypeR\x04rank\x12\x62\n\x17\x63urrent_scientific_name\x18\x03 \x01(\x0b\x32*.ncbi.datasets.v2.reports.NameAndAuthorityR\x15\x63urrentScientificName\x12\x1d\n\ngroup_name\x18\x04 \x01(\tR\tgroupName\x12.\n\x13\x63urator_common_name\x18\x05 \x01(\tR\x11\x63uratorCommonName\x12,\n\x12other_common_names\x18\x06 \x03(\tR\x10otherCommonNames\x12#\n\rgeneral_notes\x18\x07 \x03(\tR\x0cgeneralNotes\x12&\n\x0flinks_from_type\x18\x08 \x01(\tR\rlinksFromType*a\n\x0e\x43ollectionType\x12\x16\n\x12no_collection_type\x10\x00\x12!\n\x1d\x63ollection_culture_collection\x10\x01\x12\x14\n\x10specimen_voucher\x10\x02\x42\xea\nZ\x18ncbi/datasets/v2/reports\xf8\x01\x01\xc2\xf3\x18\xc8\n\n\x15Taxonomy Names Report\x12\x17TaxonomyNamesDescriptor\x1aQ<p>The downloaded taxonomy names package contains a taxonomy names data report in\x1a:<a href=\"https://jsonlines.readthedocs.io/\">JSON Lines</a>\x1aOformat in the file:<br><br><em>ncbi_dataset/data/data_report.jsonl</em><br><br>\x1awEach line of the taxonomy names data report file is a hierarchical <a href=\"https://www.json.org/json-en.html\">JSON</a>\x1asobject that represents a single taxonomic record. The schema of the taxonomic record is defined in the tables below\x1ajwhere each row describes a single field in the report or a sub-structure, which is a collection of fields.\x1aNThe outermost structure of the report is <em>TaxonomyNamesDescriptor</em>.</p>\x1aQ<p>Table fields that include a <em>Table Field Mnemonic</em> can be used with the\x1a\x91\x01<a href=\"/datasets/docs/v2/reference-docs/command-line/dataformat/\">dataformat</a> command-line tool\'s <nobr><code>--fields</code></nobr> option.\x1a\x93\x01Refer to the <a href=\"/datasets/docs/v2/reference-docs/command-line/dataformat/\">dataformat</a> CLI tool reference to see how you can use this tool\x1aOto transform taxonomy name data reports from JSON Lines to tabular formats.</p>\"\x0fLineageOrganism\"\x08Organism\"\x0fGeneDescriptors*\x91\x01{{< readfile-code-block lang=\"json\" file=\"/docs_samples/dataformat-cli/gene-to-tsv.cli.output\" begin=\"START data-report\" end=\"END data-report\">}}b\x06proto3')

_COLLECTIONTYPE = DESCRIPTOR.enum_types_by_name['CollectionType']
CollectionType = enum_type_wrapper.EnumTypeWrapper(_COLLECTIONTYPE)
no_collection_type = 0
collection_culture_collection = 1
specimen_voucher = 2


_TAXONOMYNAMESDATAREPORTPAGE = DESCRIPTOR.message_types_by_name['TaxonomyNamesDataReportPage']
_TAXONOMYNAMESREPORTMATCH = DESCRIPTOR.message_types_by_name['TaxonomyNamesReportMatch']
_TAXONOMYTYPEMATERIAL = DESCRIPTOR.message_types_by_name['TaxonomyTypeMaterial']
_NAMEANDAUTHORITY = DESCRIPTOR.message_types_by_name['NameAndAuthority']
_NAMEANDAUTHORITY_PUBLICATION = _NAMEANDAUTHORITY.nested_types_by_name['Publication']
_NAMEANDAUTHORITY_NOTE = _NAMEANDAUTHORITY.nested_types_by_name['Note']
_TAXONOMYNAMESDESCRIPTOR = DESCRIPTOR.message_types_by_name['TaxonomyNamesDescriptor']
_NAMEANDAUTHORITY_AUTHORITYCLASSIFIER = _NAMEANDAUTHORITY.enum_types_by_name['AuthorityClassifier']
_NAMEANDAUTHORITY_NOTECLASSIFIER = _NAMEANDAUTHORITY.enum_types_by_name['NoteClassifier']
TaxonomyNamesDataReportPage = _reflection.GeneratedProtocolMessageType('TaxonomyNamesDataReportPage', (_message.Message,), {
  'DESCRIPTOR' : _TAXONOMYNAMESDATAREPORTPAGE,
  '__module__' : 'ncbi.datasets.v2.reports.taxonomy_names_pb2'
  # @@protoc_insertion_point(class_scope:ncbi.datasets.v2.reports.TaxonomyNamesDataReportPage)
  })
_sym_db.RegisterMessage(TaxonomyNamesDataReportPage)

TaxonomyNamesReportMatch = _reflection.GeneratedProtocolMessageType('TaxonomyNamesReportMatch', (_message.Message,), {
  'DESCRIPTOR' : _TAXONOMYNAMESREPORTMATCH,
  '__module__' : 'ncbi.datasets.v2.reports.taxonomy_names_pb2'
  # @@protoc_insertion_point(class_scope:ncbi.datasets.v2.reports.TaxonomyNamesReportMatch)
  })
_sym_db.RegisterMessage(TaxonomyNamesReportMatch)

TaxonomyTypeMaterial = _reflection.GeneratedProtocolMessageType('TaxonomyTypeMaterial', (_message.Message,), {
  'DESCRIPTOR' : _TAXONOMYTYPEMATERIAL,
  '__module__' : 'ncbi.datasets.v2.reports.taxonomy_names_pb2'
  # @@protoc_insertion_point(class_scope:ncbi.datasets.v2.reports.TaxonomyTypeMaterial)
  })
_sym_db.RegisterMessage(TaxonomyTypeMaterial)

NameAndAuthority = _reflection.GeneratedProtocolMessageType('NameAndAuthority', (_message.Message,), {

  'Publication' : _reflection.GeneratedProtocolMessageType('Publication', (_message.Message,), {
    'DESCRIPTOR' : _NAMEANDAUTHORITY_PUBLICATION,
    '__module__' : 'ncbi.datasets.v2.reports.taxonomy_names_pb2'
    # @@protoc_insertion_point(class_scope:ncbi.datasets.v2.reports.NameAndAuthority.Publication)
    })
  ,

  'Note' : _reflection.GeneratedProtocolMessageType('Note', (_message.Message,), {
    'DESCRIPTOR' : _NAMEANDAUTHORITY_NOTE,
    '__module__' : 'ncbi.datasets.v2.reports.taxonomy_names_pb2'
    # @@protoc_insertion_point(class_scope:ncbi.datasets.v2.reports.NameAndAuthority.Note)
    })
  ,
  'DESCRIPTOR' : _NAMEANDAUTHORITY,
  '__module__' : 'ncbi.datasets.v2.reports.taxonomy_names_pb2'
  # @@protoc_insertion_point(class_scope:ncbi.datasets.v2.reports.NameAndAuthority)
  })
_sym_db.RegisterMessage(NameAndAuthority)
_sym_db.RegisterMessage(NameAndAuthority.Publication)
_sym_db.RegisterMessage(NameAndAuthority.Note)

TaxonomyNamesDescriptor = _reflection.GeneratedProtocolMessageType('TaxonomyNamesDescriptor', (_message.Message,), {
  'DESCRIPTOR' : _TAXONOMYNAMESDESCRIPTOR,
  '__module__' : 'ncbi.datasets.v2.reports.taxonomy_names_pb2'
  # @@protoc_insertion_point(class_scope:ncbi.datasets.v2.reports.TaxonomyNamesDescriptor)
  })
_sym_db.RegisterMessage(TaxonomyNamesDescriptor)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z\030ncbi/datasets/v2/reports\370\001\001\302\363\030\310\n\n\025Taxonomy Names Report\022\027TaxonomyNamesDescriptor\032Q<p>The downloaded taxonomy names package contains a taxonomy names data report in\032:<a href=\"https://jsonlines.readthedocs.io/\">JSON Lines</a>\032Oformat in the file:<br><br><em>ncbi_dataset/data/data_report.jsonl</em><br><br>\032wEach line of the taxonomy names data report file is a hierarchical <a href=\"https://www.json.org/json-en.html\">JSON</a>\032sobject that represents a single taxonomic record. The schema of the taxonomic record is defined in the tables below\032jwhere each row describes a single field in the report or a sub-structure, which is a collection of fields.\032NThe outermost structure of the report is <em>TaxonomyNamesDescriptor</em>.</p>\032Q<p>Table fields that include a <em>Table Field Mnemonic</em> can be used with the\032\221\001<a href=\"/datasets/docs/v2/reference-docs/command-line/dataformat/\">dataformat</a> command-line tool\'s <nobr><code>--fields</code></nobr> option.\032\223\001Refer to the <a href=\"/datasets/docs/v2/reference-docs/command-line/dataformat/\">dataformat</a> CLI tool reference to see how you can use this tool\032Oto transform taxonomy name data reports from JSON Lines to tabular formats.</p>\"\017LineageOrganism\"\010Organism\"\017GeneDescriptors*\221\001{{< readfile-code-block lang=\"json\" file=\"/docs_samples/dataformat-cli/gene-to-tsv.cli.output\" begin=\"START data-report\" end=\"END data-report\">}}'
  _COLLECTIONTYPE._serialized_start=2770
  _COLLECTIONTYPE._serialized_end=2867
  _TAXONOMYNAMESDATAREPORTPAGE._serialized_start=151
  _TAXONOMYNAMESDATAREPORTPAGE._serialized_end=540
  _TAXONOMYNAMESREPORTMATCH._serialized_start=543
  _TAXONOMYNAMESREPORTMATCH._serialized_end=788
  _TAXONOMYTYPEMATERIAL._serialized_start=791
  _TAXONOMYTYPEMATERIAL._serialized_end=1099
  _NAMEANDAUTHORITY._serialized_start=1102
  _NAMEANDAUTHORITY._serialized_end=2359
  _NAMEANDAUTHORITY_PUBLICATION._serialized_start=1993
  _NAMEANDAUTHORITY_PUBLICATION._serialized_end=2054
  _NAMEANDAUTHORITY_NOTE._serialized_start=2057
  _NAMEANDAUTHORITY_NOTE._serialized_end=2203
  _NAMEANDAUTHORITY_AUTHORITYCLASSIFIER._serialized_start=2205
  _NAMEANDAUTHORITY_AUTHORITYCLASSIFIER._serialized_end=2317
  _NAMEANDAUTHORITY_NOTECLASSIFIER._serialized_start=2319
  _NAMEANDAUTHORITY_NOTECLASSIFIER._serialized_end=2359
  _TAXONOMYNAMESDESCRIPTOR._serialized_start=2362
  _TAXONOMYNAMESDESCRIPTOR._serialized_end=2768
# @@protoc_insertion_point(module_scope)
