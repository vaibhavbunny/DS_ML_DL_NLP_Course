# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ncbi/datasets/v2/reports/taxonomy.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from ncbi.datasets.v2.reports import common_pb2 as ncbi_dot_datasets_dot_v2_dot_reports_dot_common__pb2
from ncbi.datasets.v2.reports import taxonomy_names_pb2 as ncbi_dot_datasets_dot_v2_dot_reports_dot_taxonomy__names__pb2
from ncbi.datasets.options import report_pb2 as ncbi_dot_datasets_dot_options_dot_report__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\'ncbi/datasets/v2/reports/taxonomy.proto\x12\x18ncbi.datasets.v2.reports\x1a%ncbi/datasets/v2/reports/common.proto\x1a-ncbi/datasets/v2/reports/taxonomy_names.proto\x1a\"ncbi/datasets/options/report.proto\"\xfb\x02\n\x16TaxonomyDataReportPage\x12G\n\x07reports\x18\x01 \x03(\x0b\x32-.ncbi.datasets.v2.reports.TaxonomyReportMatchR\x07reports\x12=\n\x08messages\x18\x02 \x03(\x0b\x32!.ncbi.datasets.v2.reports.MessageR\x08messages\x12\x1f\n\x0btotal_count\x18\x03 \x01(\rR\ntotalCount\x12&\n\x0fnext_page_token\x18\x04 \x01(\tR\rnextPageToken\x12!\n\x0c_report_type\x18\xf4\x03 \x01(\tR\nReportType\x12%\n\x0e_report_fields\x18\xf5\x03 \x03(\tR\x0cReportFields\x12\x1f\n\x0b_first_page\x18\xf6\x03 \x01(\x08R\tFirstPage\x12%\n\x0e_report_format\x18\xf7\x03 \x01(\tR\x0cReportFormat\"\xe5\x01\n\x13TaxonomyReportMatch\x12\x42\n\x08taxonomy\x18\x01 \x01(\x0b\x32&.ncbi.datasets.v2.reports.TaxonomyNodeR\x08taxonomy\x12\x14\n\x05query\x18\x02 \x03(\tR\x05query\x12;\n\x07warning\x18\x03 \x01(\x0b\x32!.ncbi.datasets.v2.reports.WarningR\x07warning\x12\x37\n\x06\x65rrors\x18\x04 \x03(\x0b\x32\x1f.ncbi.datasets.v2.reports.ErrorR\x06\x65rrors\"-\n\x07TaxData\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\x12\x0e\n\x02id\x18\x02 \x01(\rR\x02id\"\xf2\x03\n\x0e\x43lassification\x12\x45\n\x0csuperkingdom\x18\x01 \x01(\x0b\x32!.ncbi.datasets.v2.reports.TaxDataR\x0csuperkingdom\x12;\n\x07kingdom\x18\x02 \x01(\x0b\x32!.ncbi.datasets.v2.reports.TaxDataR\x07kingdom\x12\x39\n\x06phylum\x18\x03 \x01(\x0b\x32!.ncbi.datasets.v2.reports.TaxDataR\x06phylum\x12\x37\n\x05\x63lass\x18\x04 \x01(\x0b\x32!.ncbi.datasets.v2.reports.TaxDataR\x05\x63lass\x12\x37\n\x05order\x18\x05 \x01(\x0b\x32!.ncbi.datasets.v2.reports.TaxDataR\x05order\x12\x39\n\x06\x66\x61mily\x18\x06 \x01(\x0b\x32!.ncbi.datasets.v2.reports.TaxDataR\x06\x66\x61mily\x12\x37\n\x05genus\x18\x07 \x01(\x0b\x32!.ncbi.datasets.v2.reports.TaxDataR\x05genus\x12;\n\x07species\x18\x08 \x01(\x0b\x32!.ncbi.datasets.v2.reports.TaxDataR\x07species\"\xdf\x05\n\x0cTaxonomyNode\x12\x15\n\x06tax_id\x18\x01 \x01(\rR\x05taxId\x12\x36\n\x04rank\x18\x02 \x01(\x0e\x32\".ncbi.datasets.v2.reports.RankTypeR\x04rank\x12\x62\n\x17\x63urrent_scientific_name\x18\x03 \x01(\x0b\x32*.ncbi.datasets.v2.reports.NameAndAuthorityR\x15\x63urrentScientificName\x12\x46\n\x08\x62\x61sionym\x18\x04 \x01(\x0b\x32*.ncbi.datasets.v2.reports.NameAndAuthorityR\x08\x62\x61sionym\x12.\n\x13\x63urator_common_name\x18\x05 \x01(\tR\x11\x63uratorCommonName\x12\x1d\n\ngroup_name\x18\x06 \x01(\tR\tgroupName\x12*\n\x11has_type_material\x18\x07 \x01(\x08R\x0fhasTypeMaterial\x12P\n\x0e\x63lassification\x18\x08 \x01(\x0b\x32(.ncbi.datasets.v2.reports.ClassificationR\x0e\x63lassification\x12\x18\n\x07lineage\x18\t \x03(\rR\x07lineage\x12\x1a\n\x08\x63hildren\x18\n \x03(\rR\x08\x63hildren\x12J\n\x06\x63ounts\x18\x0b \x03(\x0b\x32\x32.ncbi.datasets.v2.reports.TaxonomyNode.CountByTypeR\x06\x63ounts\x12\'\n\x0fgenomic_moltype\x18\x0c \x01(\tR\x0egenomicMoltype\x1a\\\n\x0b\x43ountByType\x12\x37\n\x04type\x18\x01 \x01(\x0e\x32#.ncbi.datasets.v2.reports.CountTypeR\x04type\x12\x14\n\x05\x63ount\x18\x02 \x01(\rR\x05\x63ountB\x9f\nZ\x18ncbi/datasets/v2/reports\xf8\x01\x01\xc2\xf3\x18\xfd\t\n\x0fTaxonomy Report\x12\x0cTaxonomyNode\x1a=<p>The downloaded gene package contains a gene data report in\x1a:<a href=\"https://jsonlines.readthedocs.io/\">JSON Lines</a>\x1aOformat in the file:<br><br><em>ncbi_dataset/data/data_report.jsonl</em><br><br>\x1amEach line of the gene data report file is a hierarchical <a href=\"https://www.json.org/json-en.html\">JSON</a>\x1aiobject that represents a single gene record. The schema of the gene record is defined in the tables below\x1ajwhere each row describes a single field in the report or a sub-structure, which is a collection of fields.\x1a\x45The outermost structure of the report is <em>GeneDescriptor</em>.</p>\x1aQ<p>Table fields that include a <em>Table Field Mnemonic</em> can be used with the\x1a\x91\x01<a href=\"/datasets/docs/v2/reference-docs/command-line/dataformat/\">dataformat</a> command-line tool\'s <nobr><code>--fields</code></nobr> option.\x1a\x93\x01Refer to the <a href=\"/datasets/docs/v2/reference-docs/command-line/dataformat/\">dataformat</a> CLI tool reference to see how you can use this tool\x1a\x46to transform gene data reports from JSON Lines to tabular formats.</p>\"\x0fLineageOrganism\"\x08Organism\"\x0fGeneDescriptors*\x91\x01{{< readfile-code-block lang=\"json\" file=\"/docs_samples/dataformat-cli/gene-to-tsv.cli.output\" begin=\"START data-report\" end=\"END data-report\">}}b\x06proto3')



_TAXONOMYDATAREPORTPAGE = DESCRIPTOR.message_types_by_name['TaxonomyDataReportPage']
_TAXONOMYREPORTMATCH = DESCRIPTOR.message_types_by_name['TaxonomyReportMatch']
_TAXDATA = DESCRIPTOR.message_types_by_name['TaxData']
_CLASSIFICATION = DESCRIPTOR.message_types_by_name['Classification']
_TAXONOMYNODE = DESCRIPTOR.message_types_by_name['TaxonomyNode']
_TAXONOMYNODE_COUNTBYTYPE = _TAXONOMYNODE.nested_types_by_name['CountByType']
TaxonomyDataReportPage = _reflection.GeneratedProtocolMessageType('TaxonomyDataReportPage', (_message.Message,), {
  'DESCRIPTOR' : _TAXONOMYDATAREPORTPAGE,
  '__module__' : 'ncbi.datasets.v2.reports.taxonomy_pb2'
  # @@protoc_insertion_point(class_scope:ncbi.datasets.v2.reports.TaxonomyDataReportPage)
  })
_sym_db.RegisterMessage(TaxonomyDataReportPage)

TaxonomyReportMatch = _reflection.GeneratedProtocolMessageType('TaxonomyReportMatch', (_message.Message,), {
  'DESCRIPTOR' : _TAXONOMYREPORTMATCH,
  '__module__' : 'ncbi.datasets.v2.reports.taxonomy_pb2'
  # @@protoc_insertion_point(class_scope:ncbi.datasets.v2.reports.TaxonomyReportMatch)
  })
_sym_db.RegisterMessage(TaxonomyReportMatch)

TaxData = _reflection.GeneratedProtocolMessageType('TaxData', (_message.Message,), {
  'DESCRIPTOR' : _TAXDATA,
  '__module__' : 'ncbi.datasets.v2.reports.taxonomy_pb2'
  # @@protoc_insertion_point(class_scope:ncbi.datasets.v2.reports.TaxData)
  })
_sym_db.RegisterMessage(TaxData)

Classification = _reflection.GeneratedProtocolMessageType('Classification', (_message.Message,), {
  'DESCRIPTOR' : _CLASSIFICATION,
  '__module__' : 'ncbi.datasets.v2.reports.taxonomy_pb2'
  # @@protoc_insertion_point(class_scope:ncbi.datasets.v2.reports.Classification)
  })
_sym_db.RegisterMessage(Classification)

TaxonomyNode = _reflection.GeneratedProtocolMessageType('TaxonomyNode', (_message.Message,), {

  'CountByType' : _reflection.GeneratedProtocolMessageType('CountByType', (_message.Message,), {
    'DESCRIPTOR' : _TAXONOMYNODE_COUNTBYTYPE,
    '__module__' : 'ncbi.datasets.v2.reports.taxonomy_pb2'
    # @@protoc_insertion_point(class_scope:ncbi.datasets.v2.reports.TaxonomyNode.CountByType)
    })
  ,
  'DESCRIPTOR' : _TAXONOMYNODE,
  '__module__' : 'ncbi.datasets.v2.reports.taxonomy_pb2'
  # @@protoc_insertion_point(class_scope:ncbi.datasets.v2.reports.TaxonomyNode)
  })
_sym_db.RegisterMessage(TaxonomyNode)
_sym_db.RegisterMessage(TaxonomyNode.CountByType)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z\030ncbi/datasets/v2/reports\370\001\001\302\363\030\375\t\n\017Taxonomy Report\022\014TaxonomyNode\032=<p>The downloaded gene package contains a gene data report in\032:<a href=\"https://jsonlines.readthedocs.io/\">JSON Lines</a>\032Oformat in the file:<br><br><em>ncbi_dataset/data/data_report.jsonl</em><br><br>\032mEach line of the gene data report file is a hierarchical <a href=\"https://www.json.org/json-en.html\">JSON</a>\032iobject that represents a single gene record. The schema of the gene record is defined in the tables below\032jwhere each row describes a single field in the report or a sub-structure, which is a collection of fields.\032EThe outermost structure of the report is <em>GeneDescriptor</em>.</p>\032Q<p>Table fields that include a <em>Table Field Mnemonic</em> can be used with the\032\221\001<a href=\"/datasets/docs/v2/reference-docs/command-line/dataformat/\">dataformat</a> command-line tool\'s <nobr><code>--fields</code></nobr> option.\032\223\001Refer to the <a href=\"/datasets/docs/v2/reference-docs/command-line/dataformat/\">dataformat</a> CLI tool reference to see how you can use this tool\032Fto transform gene data reports from JSON Lines to tabular formats.</p>\"\017LineageOrganism\"\010Organism\"\017GeneDescriptors*\221\001{{< readfile-code-block lang=\"json\" file=\"/docs_samples/dataformat-cli/gene-to-tsv.cli.output\" begin=\"START data-report\" end=\"END data-report\">}}'
  _TAXONOMYDATAREPORTPAGE._serialized_start=192
  _TAXONOMYDATAREPORTPAGE._serialized_end=571
  _TAXONOMYREPORTMATCH._serialized_start=574
  _TAXONOMYREPORTMATCH._serialized_end=803
  _TAXDATA._serialized_start=805
  _TAXDATA._serialized_end=850
  _CLASSIFICATION._serialized_start=853
  _CLASSIFICATION._serialized_end=1351
  _TAXONOMYNODE._serialized_start=1354
  _TAXONOMYNODE._serialized_end=2089
  _TAXONOMYNODE_COUNTBYTYPE._serialized_start=1997
  _TAXONOMYNODE_COUNTBYTYPE._serialized_end=2089
# @@protoc_insertion_point(module_scope)
