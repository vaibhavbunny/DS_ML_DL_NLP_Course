# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ncbi/datasets/v1/datasets_service.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from ncbi.datasets.v1 import datasets_pb2 as ncbi_dot_datasets_dot_v1_dot_datasets__pb2
from ncbi.datasets.v1.reports import virus_pb2 as ncbi_dot_datasets_dot_v1_dot_reports_dot_virus__pb2
from ncbi.datasets.options import openapi_pb2 as ncbi_dot_datasets_dot_options_dot_openapi__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\'ncbi/datasets/v1/datasets_service.proto\x12\x10ncbi.datasets.v1\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fncbi/datasets/v1/datasets.proto\x1a$ncbi/datasets/v1/reports/virus.proto\x1a#ncbi/datasets/options/openapi.proto2\xc3\x13\n\x0f\x41ssemblyDataset\x12\xf3\n\n\x13GetAssemblyMetadata\x12).ncbi.datasets.v1.AssemblyMetadataRequest\x1a\".ncbi.datasets.v1.AssemblyMetadata\"\x8c\n\xc2\xf0\x19\x87\n\n\xa5\x03\x08\x01\x12,/v1/genome/accession/{accessions.accessions}\x1a\x31/v1alpha/genome/accession/{accessions.accessions}* Get genome metadata by accession2QGet detailed metadata for assembled genomes by accession in a JSON output format.:\"assembly_descriptors_by_accessionsB\x06GenomeJ\x05taxonJ\x0ftax_exact_matchJ\x16\x62ioprojects.accessionsJ\x18\x66ilters.assembly_versionJ\x1e\x66ilters.exclude_paired_reportsJ\x10returned_contentR#\n\x15\x61\x63\x63\x65ssions.accessions\x12\naccessions\n\xc6\x02\x08\x01\x12\x18/v1/genome/taxon/{taxon}\x1a\x1d/v1alpha/genome/taxon/{taxon}*+Get genome metadata by taxonomic identifier2\x85\x01Get detailed metadata on all assembled genomes for a specified NCBI Taxonomy ID or name (common or scientific) at any taxonomic rank.:\x1d\x61ssembly_descriptors_by_taxonB\x06GenomeJ\x15\x61\x63\x63\x65ssions.accessionsJ\x16\x62ioprojects.accessions\n\xf3\x02\x08\x01\x12./v1/genome/bioproject/{bioprojects.accessions}\x1a\x33/v1alpha/genome/bioproject/{bioprojects.accessions}*+Get genome metadata by bioproject accession2\\Get detailed metadata for assembled genomes by bioproject accession in a JSON output format.:\"assembly_descriptors_by_bioprojectB\x06GenomeJ\x15\x61\x63\x63\x65ssions.accessionsJ\x05taxonJ\x0ftax_exact_matchR$\n\x16\x62ioprojects.accessions\x12\naccessions\n\x9d\x01\x08\x02\x12\n/v1/genome\x1a\x0f/v1alpha/genome*-Get genome metadata by variety of identifiers2,Get detailed metadata for assembled genomes.:\x17genome_metadata_by_postB\x06Genome\x12\xb3\x06\n\x12GetDownloadSummary\x12(.ncbi.datasets.v1.AssemblyDatasetRequest\x1a!.ncbi.datasets.v1.DownloadSummary\"\xcf\x05\xc2\xf0\x19\xca\x05\n\xbf\x02\x08\x01\x12\x32/v1/genome/accession/{accessions}/download_summary\x1a\x37/v1alpha/genome/summary/accession/{assembly_accessions}\x1a\x37/v1alpha/genome/accession/{accessions}/download_summary*\x1fPreview genome dataset download2<Get a download summary by accession in a JSON output format.:\x17genome_download_summaryB\x06GenomeJ\x08hydratedJ\x0binclude_tsv\n\x85\x03\x08\x02\x12\x1b/v1/genome/download_summary\x1a /v1alpha/genome/download_summary*\'Preview genome dataset download by POST2\xef\x01The \'GET\' version of download summary is limited by the size of the GET URL (2KB, which works out to about 140 genomic accessions).  The POST operation is provided to allow users to supply a larger number of accessions in a single request.:\x1fgenome_download_summary_by_postB\x06Genome\x12y\n\x05Sleep\x12\x1e.ncbi.datasets.v1.SleepRequest\x1a\x1c.ncbi.datasets.v1.SleepReply\"2\xc2\xf0\x19.\n,\x08\x01\"(/v1alpha/sleep/{sleep_msec}/{error_rate}\x12\x88\x01\n\x0bSleepStream\x12\x1e.ncbi.datasets.v1.SleepRequest\x1a\x1c.ncbi.datasets.v1.SleepReply\"9\xc2\xf0\x19\x35\n3\x08\x01\"//v1alpha/sleep/stream/{sleep_msec}/{error_rate}0\x01\x32\x9e\x0e\n\rVirusDownload\x12\xb8\n\n\x15GetVirusDatasetStream\x12%.ncbi.datasets.v1.VirusDatasetRequest\x1a\x1b.google.protobuf.BytesValue\"\xd8\t\xc2\xf0\x19\xd3\t\n\xb5\x03\x08\x01\x12\'/v1/virus/taxon/{taxon}/genome/download\x1a*/v1alpha/virus/taxon/sars2/genome/download\x1a\x1d/v1alpha/download/virus/sars2\x1a&/v1alpha/download/virus/taxid/{tax_id}\x1a+/v1alpha/download/virus/organism/{tax_name}\x1a,/v1alpha/virus/taxon/{taxon}/genome/download*.Download a coronavirus genome dataset by taxon2.Download a coronavirus genome dataset by taxon:\x15virus_genome_downloadB\x05VirusJ\taccessionJ\naccessionsJ\x0ctable_fieldsJ\x06\x66ormatr\x0f\x61pplication/zip\n\xf6\x02\x08\x01\x12\x30/v1/virus/accession/{accessions}/genome/download\x1a\x35/v1alpha/virus/accession/{accessions}/genome/download\x1a./v1alpha/download/virus/accession/{accessions}*2Download a coronavirus genome dataset by accession22Download a coronavirus genome dataset by accession:\x1fvirus_genome_download_accessionB\x05VirusJ\x05taxonJ\x06tax_idJ\x08tax_nameJ\taccessionJ\x0ctable_fieldsJ\x06\x66ormatr\x0f\x61pplication/zip\n\x9f\x03\x08\x02\x12\x19/v1/virus/genome/download*(Get a coronavirus genome dataset by post2\xe7\x01The \'GET\' version of download is limited by the size of the GET URL (2KB, which works out to about 140 genomic accessions).  The POST operation is provided to allow users to supply a larger number of accessions in a single request.:\x1avirus_genome_download_postB\x05VirusJ\x05taxonJ\x06tax_idJ\x08tax_nameJ\taccessionJ\x0ctable_fieldsJ\x06\x66ormatr\x0f\x61pplication/zip0\x01\x12\xd1\x03\n\x1cGetSars2ProteinDatasetStream\x12,.ncbi.datasets.v1.Sars2ProteinDatasetRequest\x1a\x1b.google.protobuf.BytesValue\"\xe3\x02\xc2\xf0\x19\xde\x02\n\xdb\x02\x08\x01\x12\x31/v1/virus/taxon/sars2/protein/{proteins}/download\x1a\x30/v1alpha/download/virus/sars2/protein/{proteins}\x1a\x36/v1alpha/virus/taxon/sars2/protein/{proteins}/download*<Download SARS-CoV-2 protein and CDS datasets by protein name2$Download SARS-CoV-2 protein datasets:\x16sars2_protein_downloadB\x05VirusJ\x10\x65xclude_sequenceJ\x0ctable_fieldsJ\x06\x66ormatr\x0f\x61pplication/zip0\x01\x32\xb3!\n\x0f\x44\x61tasetDownload\x12\xfe\x06\n\x18GetAssemblyDatasetStream\x12(.ncbi.datasets.v1.AssemblyDatasetRequest\x1a\x1b.google.protobuf.BytesValue\"\x98\x06\xc2\xf0\x19\x93\x06\n\xe8\x02\x08\x01\x12*/v1/genome/accession/{accessions}/download\x1a:/v1alpha/download/assembly_accession/{assembly_accessions}\x1a//v1alpha/genome/accession/{accessions}/download*!Get a genome dataset by accession2gDownload a genome dataset including fasta sequence, annotation and a detailed data report by accession.:\x19\x64ownload_assembly_packageB\x06GenomeJ\x0binclude_tsvr\x0f\x61pplication/zip\n\xa5\x03\x08\x02\x12\x13/v1/genome/download\x1a$/v1alpha/download/assembly_accession\x1a\x18/v1alpha/genome/download*\x1cGet a genome dataset by post2\xe7\x01The \'GET\' version of download is limited by the size of the GET URL (2KB, which works out to about 140 genomic accessions).  The POST operation is provided to allow users to supply a larger number of accessions in a single request.:\x1e\x64ownload_assembly_package_postB\x06GenomeJ\x0binclude_tsvr\x0f\x61pplication/zip0\x01\x12\x9e\x06\n\x14GetGeneDatasetStream\x12$.ncbi.datasets.v1.GeneDatasetRequest\x1a\x1b.google.protobuf.BytesValue\"\xc0\x05\xc2\xf0\x19\xbb\x05\n\xb5\x03\x08\x01\x12\x1f/v1/gene/id/{gene_ids}/download\x1a$/v1alpha/download/gene/id/{gene_ids}\x1a$/v1alpha/gene/id/{gene_ids}/download*\x1dGet a gene dataset by gene ID2mGet a gene dataset including gene, transcript and protein fasta sequence, annotation and metadata by gene ID.:\x15\x64ownload_gene_packageB\x04GeneJ\x17symbols_for_taxon.taxonJ\x19symbols_for_taxon.symbolsJ\naccessionsJ\x05taxonJ\x05limitJ\x10returned_contentJ\x11sort_schema.fieldJ\x15sort_schema.directionr\x0f\x61pplication/zip\n\x80\x02\x08\x02\x12\x11/v1/gene/download\x1a\x16/v1alpha/download/gene\x1a\x16/v1alpha/gene/download*\x1aGet a gene dataset by POST2jGet a gene dataset including gene, transcript and protein fasta sequence, annotation and metadata by POST.:\x1a\x64ownload_gene_package_postB\x04Gener\x0f\x61pplication/zip0\x01\x12\xaf\x02\n\x1aGetMicroBiggeDatasetStream\x12*.ncbi.datasets.v1.MicroBiggeDatasetRequest\x1a\x1b.google.protobuf.BytesValue\"\xc5\x01\xc2\xf0\x19\xc0\x01\nr\x08\x01\"+/v1/microbigge/{opaque_solr_query}/download\"0/v1alpha/microbigge/{opaque_solr_query}/downloadr\x0f\x61pplication/zip\nJ\x08\x02\"\x1c/v1alpha/microbigge/download\"\x17/v1/microbigge/downloadr\x0f\x61pplication/zip0\x01\x12\xcb\x02\n\x1eGetRefGeneCatalogDatasetStream\x12..ncbi.datasets.v1.RefGeneCatalogDatasetRequest\x1a\x1b.google.protobuf.BytesValue\"\xd9\x01\xc2\xf0\x19\xd4\x01\n|\x08\x01\"0/v1/refgene_catalog/{opaque_solr_query}/download\"5/v1alpha/refgene_catalog/{opaque_solr_query}/downloadr\x0f\x61pplication/zip\nT\x08\x02\"!/v1alpha/refgene_catalog/download\"\x1c/v1/refgene_catalog/downloadr\x0f\x61pplication/zip0\x01\x12\xaf\x06\n\x1eGetProkaryoteGeneDatasetStream\x12\'.ncbi.datasets.v1.ProkaryoteGeneRequest\x1a\x1b.google.protobuf.BytesValue\"\xc4\x05\xc2\xf0\x19\xbf\x05\n\xdf\x02\x08\x01\x12+/v1/protein/accession/{accessions}/download\x1a\x30/v1alpha/protein/accession/{accessions}/download*9Get a prokaryote gene dataset by RefSeq protein accession2\x81\x01Get a prokaryote gene dataset including gene and protein fasta sequence, annotation and metadata by prokaryote protein accession.: download_prokaryote_gene_packageB\nProkaryoter\x0f\x61pplication/zip\n\xda\x02\x08\x02\x12\x1e/v1/protein/accession/download\x1a#/v1alpha/protein/accession/download*AGet a prokaryote gene dataset by RefSeq protein accession by POST2\x89\x01Get a prokaryote gene dataset including gene and protein fasta sequence, annotation and metadata by prokaryote protein accession by POST.:%download_prokaryote_gene_package_postB\nProkaryoter\x0f\x61pplication/zip0\x01\x12\xcb\x08\n\x19\x43heckAssemblyAvailability\x12(.ncbi.datasets.v1.AssemblyDatasetRequest\x1a-.ncbi.datasets.v1.AssemblyDatasetAvailability\"\xd4\x07\xc2\xf0\x19\xcf\x07\n\x9f\x04\x08\x01\x12\'/v1/genome/accession/{accessions}/check\x1a@/v1alpha/download/assembly_accession/check/{assembly_accessions}\x1a,/v1alpha/genome/accession/{accessions}/check*\'Check the validity of genome accessions2\xe4\x01The \'GET\' version of check is limited by the size of the GET URL (2KB, which works out to about 140 genomic accessions).  The POST operation is provided to allow users to supply a larger number of accessions in a single request.:\x1b\x63heck_assembly_availabilityB\x06GenomeJ\x0b\x63hromosomesJ\x10\x65xclude_sequenceJ\x17include_annotation_typeJ\x08hydratedJ\x0binclude_tsv\n\xaa\x03\x08\x02\x12\x10/v1/genome/check\x1a*/v1alpha/download/assembly_accession/check\x1a\x15/v1alpha/genome/check*@Check the validity of many genome accessions in a single request2\xe4\x01The \'GET\' version of check is limited by the size of the GET URL (2KB, which works out to about 140 genomic accessions).  The POST operation is provided to allow users to supply a larger number of accessions in a single request.: check_assembly_availability_postB\x06Genome2\xe3(\n\x0bGeneDataset\x12\xcb\x03\n\x12GetGeneDescriptors\x12$.ncbi.datasets.v1.GeneDatasetRequest\x1a!.ncbi.datasets.v1.GeneDescriptors\"\xeb\x02\xc2\xf0\x19\xe6\x02\n\xc4\x02\x08\x01\x1a,/v1alpha/gene_descriptors/gene/id/{gene_ids}\x1a#/v1alpha/gene/summary/id/{gene_ids}\x1a\'/v1alpha/gene/id/{gene_ids}/descriptors\x1a\x31/v1alpha/gene/accessions/{accessions}/descriptors\x1a\x30/v1alpha/gene/accession/{accessions}/descriptors\x1a_/v1alpha/gene/symbol/{symbols_for_taxon.symbols}/taxonomy/{symbols_for_taxon.taxon}/descriptors\n\x1d\x08\x02\x1a\x19/v1alpha/gene/descriptors\x12\x8f\n\n\x0fGetGeneMetadata\x12$.ncbi.datasets.v1.GeneDatasetRequest\x1a\x1e.ncbi.datasets.v1.GeneMetadata\"\xb5\t\xc2\xf0\x19\xb0\t\n\x9c\x02\x08\x01\x12\x16/v1/gene/id/{gene_ids}\x1a\x1b/v1alpha/gene/id/{gene_ids}*\x1bGet gene metadata by GeneID2=Get detailed gene metadata by GeneID in a JSON output format.:\x13gene_metadata_by_idB\x04GeneJ\x17symbols_for_taxon.taxonJ\x19symbols_for_taxon.symbolsJ\naccessionsJ\x05taxonJ\x17include_annotation_typeJ\x0c\x66\x61sta_filter\n\xc7\x02\x08\x01\x12\x1f/v1/gene/accession/{accessions}\x1a$/v1alpha/gene/accession/{accessions}*%Get gene metadata by RefSeq Accession2GGet detailed gene metadata by RefSeq Accession in a JSON output format.:\x1agene_metadata_by_accessionB\x04GeneJ\x17symbols_for_taxon.taxonJ\x19symbols_for_taxon.symbolsJ\x08gene_idsJ\x05taxonJ\x17include_annotation_typeJ\x0c\x66\x61sta_filter\n\xb9\x03\x08\x01\x12K/v1/gene/symbol/{symbols_for_taxon.symbols}/taxon/{symbols_for_taxon.taxon}\x1aP/v1alpha/gene/symbol/{symbols_for_taxon.symbols}/taxon/{symbols_for_taxon.taxon}* Get gene metadata by gene symbol2BGet detailed gene metadata by gene symbol in a JSON output format.:\x1fgene_metadata_by_tax_and_symbolB\x04GeneJ\taccessionJ\x08gene_idsJ\x05taxonJ\x17include_annotation_typeJ\x0c\x66\x61sta_filterR$\n\x19symbols_for_taxon.symbols\x12\x07symbolsR \n\x17symbols_for_taxon.taxon\x12\x05taxon\n\x88\x01\x08\x02\x12\x08/v1/gene\x1a\r/v1alpha/gene*\x19Get gene metadata as JSON23Get detailed gene metadata in a JSON output format.:\x15gene_metadata_by_postB\x04Gene\x12\xab\x02\n\x12StreamGeneMetadata\x12$.ncbi.datasets.v1.GeneDatasetRequest\x1a\x1b.ncbi.datasets.v1.GeneMatch\"\xcf\x01\xc2\xf0\x19\xca\x01\n\xc7\x01\x08\x02\x12\x0f/v1/gene/stream\x1a\x14/v1alpha/gene/stream*\x11Get gene metadata2DGet detailed gene metadata in a streaming, JSON-lines output format.:\x1cgene_metadata_stream_by_postB\x04GeneZ\tGeneMatchr\x14\x61pplication/x-ndjson0\x01\x12\xbe\x0f\n\x12GetDownloadSummary\x12$.ncbi.datasets.v1.GeneDatasetRequest\x1a!.ncbi.datasets.v1.DownloadSummary\"\xde\x0e\xc2\xf0\x19\xd9\x0e\n\xa4\x03\x08\x01\x12\'/v1/gene/id/{gene_ids}/download_summary\x1a#/v1alpha/gene/id/{gene_ids}/summary\x1a,/v1alpha/gene/id/{gene_ids}/download_summary*#Get gene download summary by GeneID29Get a download summary by GeneID in a JSON output format.:\x1bgene_download_summary_by_idB\x04GeneJ\x17include_annotation_typeJ\x17symbols_for_taxon.taxonJ\x19symbols_for_taxon.symbolsJ\x15sort_schema.directionJ\x11sort_schema.fieldJ\naccessionsJ\x10returned_contentJ\x05taxonJ\x05limit\n\x8a\x04\x08\x01\x12\x30/v1/gene/accession/{accessions}/download_summary\x1a-/v1alpha/gene/accessions/{accessions}/summary\x1a,/v1alpha/gene/accession/{accessions}/summary\x1a\x35/v1alpha/gene/accession/{accessions}/download_summary*-Get gene download summary by RefSeq Accession2FGet gene download summary by RefSeq Accession in a JSON output format.:\"gene_download_summary_by_accessionB\x04GeneJ\x17include_annotation_typeJ\x17symbols_for_taxon.taxonJ\x19symbols_for_taxon.symbolsJ\x15sort_schema.directionJ\x11sort_schema.fieldJ\x08gene_idsJ\x10returned_contentJ\x05taxonJ\x05limit\n\xd7\x05\x08\x01\x12\\/v1/gene/symbol/{symbols_for_taxon.symbols}/taxon/{symbols_for_taxon.taxon}/download_summary\x1a[/v1alpha/gene/symbol/{symbols_for_taxon.symbols}/taxonomy/{symbols_for_taxon.taxon}/summary\x1aX/v1alpha/gene/symbol/{symbols_for_taxon.symbols}/taxon/{symbols_for_taxon.taxon}/summary\x1a\x61/v1alpha/gene/symbol/{symbols_for_taxon.symbols}/taxon/{symbols_for_taxon.taxon}/download_summary*(Get gene download summary by gene symbol2AGet gene download summary by gene symbol in a JSON output format.:\'gene_download_summary_by_tax_and_symbolB\x04GeneJ\x17include_annotation_typeJ\x08gene_idsJ\naccessionsJ\x10returned_contentJ\x15sort_schema.directionJ\x11sort_schema.fieldJ\x05taxonJ\x05limitR$\n\x19symbols_for_taxon.symbols\x12\x07symbolsR \n\x17symbols_for_taxon.taxon\x12\x05taxon\n\xc8\x01\x08\x02\x12\x19/v1/gene/download_summary\x1a\x15/v1alpha/gene/summary\x1a\x1e/v1alpha/gene/download_summary*\x19Get gene download summary22Get gene download summary in a JSON output format.:\x1dgene_download_summary_by_postB\x04Gene\x12\xb5\x02\n\x0eGetOrthologSet\x12!.ncbi.datasets.v1.OrthologRequest\x1a\x1d.ncbi.datasets.v1.OrthologSet\"\xe0\x01\xc2\xf0\x19\xdb\x01\n\xd8\x01\x08\x01\x12\x1f/v1/gene/id/{gene_id}/orthologs\x1a$/v1alpha/gene/id/{gene_id}/orthologs*\x1dGet gene orthologs by gene ID2RGet detailed gene metadata for an ortholog set by gene ID in a JSON output format.:\x14gene_orthologs_by_idB\x04Gene\x12\xdf\x02\n\nGetTaxTree\x12 .ncbi.datasets.v1.TaxTreeRequest\x1a\x1a.ncbi.datasets.v1.Organism\"\x92\x02\xc2\xf0\x19\x8d\x02\n\x8a\x02\x08\x01\x12\x1b/v1/gene/taxon/{taxon}/tree\x1a /v1alpha/gene/taxon/{taxon}/tree*/Get a taxonomic subtree by taxonomic identifier2\x80\x01Using an NCBI Taxonomy ID or name (common or scientific) at any rank, get a subtree filtered for species with assembled genomes.:\rgene_tax_treeB\x04Gene\x12\xea\x03\n\x15GetOrganismsThatMatch\x12&.ncbi.datasets.v1.OrganismQueryRequest\x1a\x1f.ncbi.datasets.v1.SciNameAndIds\"\x87\x03\xc2\xf0\x19\x82\x03\n\xff\x02\x08\x01\x12$/v1/gene/taxon_suggest/{taxon_query}\x1a\x30/v1alpha/gene/tax_name_query/{taxon_query}/names\x1a)/v1alpha/gene/taxon_suggest/{taxon_query}*]Get a list of taxonomy names and IDs found in the gene dataset given a partial taxonomic name2~This endpoint retrieves a list of taxonomy names and IDs found in the gene dataset given a partial taxonomic name of any rank.:\x13gene_tax_name_queryB\x04Gene2\x8b \n\x0cVirusDataset\x12\xe8\x08\n\x12GetDownloadSummary\x12%.ncbi.datasets.v1.VirusDatasetRequest\x1a!.ncbi.datasets.v1.DownloadSummary\"\x87\x08\xc2\xf0\x19\x82\x08\n\xf9\x02\x08\x01\x12\x1e/v1/virus/taxon/{taxon}/genome\x1a%/v1alpha/virus/summary/taxid/{tax_id}\x1a*/v1alpha/virus/summary/organism/{tax_name}\x1a#/v1alpha/virus/taxon/{taxon}/genome*3Get summary data for Coronaviridae genomes by taxon2^Get summary data and download by command line instructions for Coronaviridae genomes by taxon.:\x14virus_genome_summaryB\x05VirusJ\taccessionJ\naccessionsJ\x0ctable_fieldsJ\x06\x66ormat\n\xfe\x01\x08\x01\x12\'/v1/virus/accession/{accessions}/genome*7Get summary data for Coronaviridae genomes by accession27Get summary data for Coronaviridae genomes by accession:\x1evirus_genome_summary_accessionB\x05VirusJ\x05taxonJ\x06tax_idJ\x08tax_nameJ\taccessionJ\x0ctable_fieldsJ\x06\x66ormat\n\x82\x03\x08\x02\x12\x10/v1/virus/genome*2Get summary data for Coronaviridae genomes by post2\xdb\x01The \'GET\' version is limited by the size of the GET URL (2KB, which works out to about 140 genomic accessions).  The POST operation is provided to allow users to supply a larger number of accessions in a single request.:\x19virus_genome_summary_postB\x05VirusJ\x05taxonJ\x06tax_idJ\x08tax_nameJ\taccessionJ\x0ctable_fieldsJ\x06\x66ormat\x12\xcb\x03\n\x1eGetSars2ProteinDownloadSummary\x12,.ncbi.datasets.v1.Sars2ProteinDatasetRequest\x1a!.ncbi.datasets.v1.DownloadSummary\"\xd7\x02\xc2\xf0\x19\xd2\x02\n\xcf\x02\x08\x01\x12(/v1/virus/taxon/sars2/protein/{proteins}\x1a//v1alpha/virus/summary/sars2/protein/{proteins}\x1a-/v1alpha/virus/taxon/sars2/protein/{proteins}*>Summary of SARS-CoV-2 protein and CDS datasets by protein name2;Download a summary of available SARS-CoV-2 protein datasets:\x15sars2_protein_summaryB\x05VirusJ\x10\x65xclude_sequenceJ\x0ctable_fieldsJ\x06\x66ormat\x12\xa7\x03\n\x1dGetVirusGenomeMetadataAsTable\x12%.ncbi.datasets.v1.VirusDatasetRequest\x1a\x1f.ncbi.datasets.v1.TabularOutput\"\xbb\x02\xc2\xf0\x19\xb6\x02\n\xb3\x02\x08\x01\x12$/v1/virus/taxon/{taxon}/genome/table\x1a)/v1alpha/virus/taxon/{taxon}/genome/table*/Get viral genomic metadata in a tabular format.2PGet viral genomic metadata in tabular format for Coronaviridae genomes by taxon.:\x12virus_genome_tableB\x05VirusJ\x10\x65xclude_sequenceJ\x17include_annotation_typeJ\taccessionJ\naccessions0\x01\x12\xa0\x03\n\x1eGetSars2ProteinMetadataAsTable\x12,.ncbi.datasets.v1.Sars2ProteinDatasetRequest\x1a\x1f.ncbi.datasets.v1.TabularOutput\"\xac\x02\xc2\xf0\x19\xa7\x02\n\xa4\x02\x08\x01\x12./v1/virus/taxon/sars2/protein/{proteins}/table\x1a\x33/v1alpha/virus/taxon/sars2/protein/{proteins}/table*4Get SARS-CoV-2 protein metadata in a tabular format.2>Get protein metadata in tabular format for SARS-CoV-2 genomes.:\x13sars2_protein_tableB\x05VirusJ\x10\x65xclude_sequenceJ\x17include_annotation_type0\x01\x12\xba\t\n\x13GetVirusDataReports\x12(.ncbi.datasets.v1.VirusDataReportRequest\x1a-.ncbi.datasets.v1.reports.VirusDataReportPage\"\xc9\x08\xc2\xf0\x19\xc4\x08\n\x83\x03\x08\x01\x12-/v1/virus/taxon/{filter.taxon}/dataset_report*\x1bGet virus metadata by taxon2\x94\x01Get virus metadata by taxon. By default, in paged JSON format, but also available as tabular (accept: x-tabular) or json-lines (accept: x-jsonlines):\x16virus_reports_by_taxonB\x05VirusJ\x11\x66ilter.accessionsJ\x0ctable_formatR\x15\n\x0c\x66ilter.taxon\x12\x05taxonZ\x16v1reportsVirusAssemblyh\x01r\x10\x61pplication/jsonr\x19text/tab-separated-values\n\x9c\x03\x08\x01\x12\x36/v1/virus/accession/{filter.accessions}/dataset_report*\x1fGet virus metadata by accession2\x97\x01Get virus metadata by accesion. By default, in paged JSON format, but also available as tabular (accept: x-tabular) or json-lines (accept: x-jsonlines):\x1avirus_reports_by_acessionsB\x05VirusJ\x0c\x66ilter.taxonJ\x0ctable_formatR\x1f\n\x11\x66ilter.accessions\x12\naccessionsZ\x16v1reportsVirusAssemblyh\x01r\x10\x61pplication/jsonr\x19text/tab-separated-values\n\x9c\x02\x08\x02\x12\t/v1/virus*\x1aGet virus metadata by POST2\x8b\x01Get virus metadata. By default, in paged JSON format, but also available as tabular (accept: x-tabular) or json-lines (accept: x-jsonlines):\x15virus_reports_by_postB\x05VirusZ\x16v1reportsVirusAssemblyh\x01r\x10\x61pplication/jsonr\x19text/tab-separated-values\x12\xb7\x03\n\x16\x43heckVirusAvailability\x12*.ncbi.datasets.v1.VirusAvailabilityRequest\x1a#.ncbi.datasets.v1.VirusAvailability\"\xcb\x02\xc2\xf0\x19\xc6\x02\n\xa8\x01\x08\x01\x12&/v1/virus/accession/{accessions}/check*(Check available viruses by accession GET2\x1b\x43heck available viruses GET:\x1cvirus_accession_availabilityB\x05Virusr\x10\x61pplication/json\n\x98\x01\x08\x02\x12\x0f/v1/virus/check*)Check available viruses by accession POST2\x1c\x43heck available viruses POST:!virus_accession_availability_postB\x05Virusr\x10\x61pplication/json2\x97\x01\n\x0cHttpDatafile\x12\x86\x01\n\x05\x46\x65tch\x12&.ncbi.datasets.v1.MethodPayloadRequest\x1a\x1b.google.protobuf.BytesValue\"6\xc2\xf0\x19\x32\n0\x08\x01\"\x1b/fetch_h/{method}/{payload}r\x0f\x61pplication/zip0\x01\x32\xef\x0f\n\x0fTaxonomyDataset\x12\x8f\x06\n\x16GetTaxonomyMetadataFor\x12).ncbi.datasets.v1.TaxonomyMetadataRequest\x1a*.ncbi.datasets.v1.TaxonomyMetadataResponse\"\x9d\x05\xc2\xf0\x19\x98\x05\n\xca\x02\x08\x01\x12\x1b/v1/taxonomy/taxon/{taxons}*3Use taxonomic identifiers to get taxonomic metadata2\xd6\x01Using NCBI Taxonomy IDs or names (common or scientific) at any rank, get metadata about a taxonomic node including taxonomic identifiers, lineage information, child nodes, and gene and genome counts in JSON format.:\x11taxonomy_metadataB\x08Taxonomy\n\xc8\x02\x08\x02\x12\x0c/v1/taxonomy*;Use taxonomic identifiers to get taxonomic metadata by post2\xd6\x01Using NCBI Taxonomy IDs or names (common or scientific) at any rank, get metadata about a taxonomic node including taxonomic identifiers, lineage information, child nodes, and gene and genome counts in JSON format.:\x16taxonomy_metadata_postB\x08Taxonomy\x12\xea\x06\n\x19GetMinimumFilteredSubtree\x12\x30.ncbi.datasets.v1.TaxonomyFilteredSubtreeRequest\x1a\x31.ncbi.datasets.v1.TaxonomyFilteredSubtreeResponse\"\xe7\x05\xc2\xf0\x19\xe2\x05\n\xef\x02\x08\x01\x12,/v1/taxonomy/taxon/{taxons}/filtered_subtree*=Use taxonomic identifiers to get a filtered taxonomic subtree2\xd8\x01Using NCBI Taxonomy IDs or names (common or scientific) at any rank, get a filtered taxonomic subtree that includes the full parent lineage and all immediate children from the selected taxonomic ranks in JSON format.:\x19taxonomy_filtered_subtreeB\x08Taxonomy\n\xed\x02\x08\x02\x12\x1d/v1/taxonomy/filtered_subtree*EUse taxonomic identifiers to get a filtered taxonomic subtree by post2\xd8\x01Using NCBI Taxonomy IDs or names (common or scientific) at any rank, get a filtered taxonomic subtree that includes the full parent lineage and all immediate children from the selected taxonomic ranks in JSON format.:\x1etaxonomy_filtered_subtree_postB\x08Taxonomy\x12\xdc\x02\n\x15GetOrganismsThatMatch\x12&.ncbi.datasets.v1.OrganismQueryRequest\x1a\x1f.ncbi.datasets.v1.SciNameAndIds\"\xf9\x01\xc2\xf0\x19\xf4\x01\n\xf1\x01\x08\x01\x12(/v1/taxonomy/taxon_suggest/{taxon_query}*CGet a list of taxonomy names and IDs given a partial taxonomic name2dThis endpoint retrieves a list of taxonomy names and IDs given a partial taxonomic name of any rank.:\x0etax_name_queryB\x08Taxonomy2\xdc\x01\n\x07Gateway\x12\xd0\x01\n\x07Version\x12\x16.google.protobuf.Empty\x1a\x1e.ncbi.datasets.v1.VersionReply\"\x8c\x01\xc2\xf0\x19\x87\x01\n\x84\x01\x08\x01\x12\x0b/v1/version\x1a\x10/v1alpha/version*\x18Retrieve service version25Retrieve the latest version of the Datasets services.:\x07versionB\x07VersionB\x1dZ\x10ncbi/datasets/v1\xf8\x01\x01\xc2\xf0\x19\x04\n\x02v1b\x06proto3')



_ASSEMBLYDATASET = DESCRIPTOR.services_by_name['AssemblyDataset']
_VIRUSDOWNLOAD = DESCRIPTOR.services_by_name['VirusDownload']
_DATASETDOWNLOAD = DESCRIPTOR.services_by_name['DatasetDownload']
_GENEDATASET = DESCRIPTOR.services_by_name['GeneDataset']
_VIRUSDATASET = DESCRIPTOR.services_by_name['VirusDataset']
_HTTPDATAFILE = DESCRIPTOR.services_by_name['HttpDatafile']
_TAXONOMYDATASET = DESCRIPTOR.services_by_name['TaxonomyDataset']
_GATEWAY = DESCRIPTOR.services_by_name['Gateway']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z\020ncbi/datasets/v1\370\001\001\302\360\031\004\n\002v1'
  _ASSEMBLYDATASET.methods_by_name['GetAssemblyMetadata']._options = None
  _ASSEMBLYDATASET.methods_by_name['GetAssemblyMetadata']._serialized_options = b'\302\360\031\207\n\n\245\003\010\001\022,/v1/genome/accession/{accessions.accessions}\0321/v1alpha/genome/accession/{accessions.accessions}* Get genome metadata by accession2QGet detailed metadata for assembled genomes by accession in a JSON output format.:\"assembly_descriptors_by_accessionsB\006GenomeJ\005taxonJ\017tax_exact_matchJ\026bioprojects.accessionsJ\030filters.assembly_versionJ\036filters.exclude_paired_reportsJ\020returned_contentR#\n\025accessions.accessions\022\naccessions\n\306\002\010\001\022\030/v1/genome/taxon/{taxon}\032\035/v1alpha/genome/taxon/{taxon}*+Get genome metadata by taxonomic identifier2\205\001Get detailed metadata on all assembled genomes for a specified NCBI Taxonomy ID or name (common or scientific) at any taxonomic rank.:\035assembly_descriptors_by_taxonB\006GenomeJ\025accessions.accessionsJ\026bioprojects.accessions\n\363\002\010\001\022./v1/genome/bioproject/{bioprojects.accessions}\0323/v1alpha/genome/bioproject/{bioprojects.accessions}*+Get genome metadata by bioproject accession2\\Get detailed metadata for assembled genomes by bioproject accession in a JSON output format.:\"assembly_descriptors_by_bioprojectB\006GenomeJ\025accessions.accessionsJ\005taxonJ\017tax_exact_matchR$\n\026bioprojects.accessions\022\naccessions\n\235\001\010\002\022\n/v1/genome\032\017/v1alpha/genome*-Get genome metadata by variety of identifiers2,Get detailed metadata for assembled genomes.:\027genome_metadata_by_postB\006Genome'
  _ASSEMBLYDATASET.methods_by_name['GetDownloadSummary']._options = None
  _ASSEMBLYDATASET.methods_by_name['GetDownloadSummary']._serialized_options = b'\302\360\031\312\005\n\277\002\010\001\0222/v1/genome/accession/{accessions}/download_summary\0327/v1alpha/genome/summary/accession/{assembly_accessions}\0327/v1alpha/genome/accession/{accessions}/download_summary*\037Preview genome dataset download2<Get a download summary by accession in a JSON output format.:\027genome_download_summaryB\006GenomeJ\010hydratedJ\013include_tsv\n\205\003\010\002\022\033/v1/genome/download_summary\032 /v1alpha/genome/download_summary*\'Preview genome dataset download by POST2\357\001The \'GET\' version of download summary is limited by the size of the GET URL (2KB, which works out to about 140 genomic accessions).  The POST operation is provided to allow users to supply a larger number of accessions in a single request.:\037genome_download_summary_by_postB\006Genome'
  _ASSEMBLYDATASET.methods_by_name['Sleep']._options = None
  _ASSEMBLYDATASET.methods_by_name['Sleep']._serialized_options = b'\302\360\031.\n,\010\001\"(/v1alpha/sleep/{sleep_msec}/{error_rate}'
  _ASSEMBLYDATASET.methods_by_name['SleepStream']._options = None
  _ASSEMBLYDATASET.methods_by_name['SleepStream']._serialized_options = b'\302\360\0315\n3\010\001\"//v1alpha/sleep/stream/{sleep_msec}/{error_rate}'
  _VIRUSDOWNLOAD.methods_by_name['GetVirusDatasetStream']._options = None
  _VIRUSDOWNLOAD.methods_by_name['GetVirusDatasetStream']._serialized_options = b'\302\360\031\323\t\n\265\003\010\001\022\'/v1/virus/taxon/{taxon}/genome/download\032*/v1alpha/virus/taxon/sars2/genome/download\032\035/v1alpha/download/virus/sars2\032&/v1alpha/download/virus/taxid/{tax_id}\032+/v1alpha/download/virus/organism/{tax_name}\032,/v1alpha/virus/taxon/{taxon}/genome/download*.Download a coronavirus genome dataset by taxon2.Download a coronavirus genome dataset by taxon:\025virus_genome_downloadB\005VirusJ\taccessionJ\naccessionsJ\014table_fieldsJ\006formatr\017application/zip\n\366\002\010\001\0220/v1/virus/accession/{accessions}/genome/download\0325/v1alpha/virus/accession/{accessions}/genome/download\032./v1alpha/download/virus/accession/{accessions}*2Download a coronavirus genome dataset by accession22Download a coronavirus genome dataset by accession:\037virus_genome_download_accessionB\005VirusJ\005taxonJ\006tax_idJ\010tax_nameJ\taccessionJ\014table_fieldsJ\006formatr\017application/zip\n\237\003\010\002\022\031/v1/virus/genome/download*(Get a coronavirus genome dataset by post2\347\001The \'GET\' version of download is limited by the size of the GET URL (2KB, which works out to about 140 genomic accessions).  The POST operation is provided to allow users to supply a larger number of accessions in a single request.:\032virus_genome_download_postB\005VirusJ\005taxonJ\006tax_idJ\010tax_nameJ\taccessionJ\014table_fieldsJ\006formatr\017application/zip'
  _VIRUSDOWNLOAD.methods_by_name['GetSars2ProteinDatasetStream']._options = None
  _VIRUSDOWNLOAD.methods_by_name['GetSars2ProteinDatasetStream']._serialized_options = b'\302\360\031\336\002\n\333\002\010\001\0221/v1/virus/taxon/sars2/protein/{proteins}/download\0320/v1alpha/download/virus/sars2/protein/{proteins}\0326/v1alpha/virus/taxon/sars2/protein/{proteins}/download*<Download SARS-CoV-2 protein and CDS datasets by protein name2$Download SARS-CoV-2 protein datasets:\026sars2_protein_downloadB\005VirusJ\020exclude_sequenceJ\014table_fieldsJ\006formatr\017application/zip'
  _DATASETDOWNLOAD.methods_by_name['GetAssemblyDatasetStream']._options = None
  _DATASETDOWNLOAD.methods_by_name['GetAssemblyDatasetStream']._serialized_options = b'\302\360\031\223\006\n\350\002\010\001\022*/v1/genome/accession/{accessions}/download\032:/v1alpha/download/assembly_accession/{assembly_accessions}\032//v1alpha/genome/accession/{accessions}/download*!Get a genome dataset by accession2gDownload a genome dataset including fasta sequence, annotation and a detailed data report by accession.:\031download_assembly_packageB\006GenomeJ\013include_tsvr\017application/zip\n\245\003\010\002\022\023/v1/genome/download\032$/v1alpha/download/assembly_accession\032\030/v1alpha/genome/download*\034Get a genome dataset by post2\347\001The \'GET\' version of download is limited by the size of the GET URL (2KB, which works out to about 140 genomic accessions).  The POST operation is provided to allow users to supply a larger number of accessions in a single request.:\036download_assembly_package_postB\006GenomeJ\013include_tsvr\017application/zip'
  _DATASETDOWNLOAD.methods_by_name['GetGeneDatasetStream']._options = None
  _DATASETDOWNLOAD.methods_by_name['GetGeneDatasetStream']._serialized_options = b'\302\360\031\273\005\n\265\003\010\001\022\037/v1/gene/id/{gene_ids}/download\032$/v1alpha/download/gene/id/{gene_ids}\032$/v1alpha/gene/id/{gene_ids}/download*\035Get a gene dataset by gene ID2mGet a gene dataset including gene, transcript and protein fasta sequence, annotation and metadata by gene ID.:\025download_gene_packageB\004GeneJ\027symbols_for_taxon.taxonJ\031symbols_for_taxon.symbolsJ\naccessionsJ\005taxonJ\005limitJ\020returned_contentJ\021sort_schema.fieldJ\025sort_schema.directionr\017application/zip\n\200\002\010\002\022\021/v1/gene/download\032\026/v1alpha/download/gene\032\026/v1alpha/gene/download*\032Get a gene dataset by POST2jGet a gene dataset including gene, transcript and protein fasta sequence, annotation and metadata by POST.:\032download_gene_package_postB\004Gener\017application/zip'
  _DATASETDOWNLOAD.methods_by_name['GetMicroBiggeDatasetStream']._options = None
  _DATASETDOWNLOAD.methods_by_name['GetMicroBiggeDatasetStream']._serialized_options = b'\302\360\031\300\001\nr\010\001\"+/v1/microbigge/{opaque_solr_query}/download\"0/v1alpha/microbigge/{opaque_solr_query}/downloadr\017application/zip\nJ\010\002\"\034/v1alpha/microbigge/download\"\027/v1/microbigge/downloadr\017application/zip'
  _DATASETDOWNLOAD.methods_by_name['GetRefGeneCatalogDatasetStream']._options = None
  _DATASETDOWNLOAD.methods_by_name['GetRefGeneCatalogDatasetStream']._serialized_options = b'\302\360\031\324\001\n|\010\001\"0/v1/refgene_catalog/{opaque_solr_query}/download\"5/v1alpha/refgene_catalog/{opaque_solr_query}/downloadr\017application/zip\nT\010\002\"!/v1alpha/refgene_catalog/download\"\034/v1/refgene_catalog/downloadr\017application/zip'
  _DATASETDOWNLOAD.methods_by_name['GetProkaryoteGeneDatasetStream']._options = None
  _DATASETDOWNLOAD.methods_by_name['GetProkaryoteGeneDatasetStream']._serialized_options = b'\302\360\031\277\005\n\337\002\010\001\022+/v1/protein/accession/{accessions}/download\0320/v1alpha/protein/accession/{accessions}/download*9Get a prokaryote gene dataset by RefSeq protein accession2\201\001Get a prokaryote gene dataset including gene and protein fasta sequence, annotation and metadata by prokaryote protein accession.: download_prokaryote_gene_packageB\nProkaryoter\017application/zip\n\332\002\010\002\022\036/v1/protein/accession/download\032#/v1alpha/protein/accession/download*AGet a prokaryote gene dataset by RefSeq protein accession by POST2\211\001Get a prokaryote gene dataset including gene and protein fasta sequence, annotation and metadata by prokaryote protein accession by POST.:%download_prokaryote_gene_package_postB\nProkaryoter\017application/zip'
  _DATASETDOWNLOAD.methods_by_name['CheckAssemblyAvailability']._options = None
  _DATASETDOWNLOAD.methods_by_name['CheckAssemblyAvailability']._serialized_options = b'\302\360\031\317\007\n\237\004\010\001\022\'/v1/genome/accession/{accessions}/check\032@/v1alpha/download/assembly_accession/check/{assembly_accessions}\032,/v1alpha/genome/accession/{accessions}/check*\'Check the validity of genome accessions2\344\001The \'GET\' version of check is limited by the size of the GET URL (2KB, which works out to about 140 genomic accessions).  The POST operation is provided to allow users to supply a larger number of accessions in a single request.:\033check_assembly_availabilityB\006GenomeJ\013chromosomesJ\020exclude_sequenceJ\027include_annotation_typeJ\010hydratedJ\013include_tsv\n\252\003\010\002\022\020/v1/genome/check\032*/v1alpha/download/assembly_accession/check\032\025/v1alpha/genome/check*@Check the validity of many genome accessions in a single request2\344\001The \'GET\' version of check is limited by the size of the GET URL (2KB, which works out to about 140 genomic accessions).  The POST operation is provided to allow users to supply a larger number of accessions in a single request.: check_assembly_availability_postB\006Genome'
  _GENEDATASET.methods_by_name['GetGeneDescriptors']._options = None
  _GENEDATASET.methods_by_name['GetGeneDescriptors']._serialized_options = b'\302\360\031\346\002\n\304\002\010\001\032,/v1alpha/gene_descriptors/gene/id/{gene_ids}\032#/v1alpha/gene/summary/id/{gene_ids}\032\'/v1alpha/gene/id/{gene_ids}/descriptors\0321/v1alpha/gene/accessions/{accessions}/descriptors\0320/v1alpha/gene/accession/{accessions}/descriptors\032_/v1alpha/gene/symbol/{symbols_for_taxon.symbols}/taxonomy/{symbols_for_taxon.taxon}/descriptors\n\035\010\002\032\031/v1alpha/gene/descriptors'
  _GENEDATASET.methods_by_name['GetGeneMetadata']._options = None
  _GENEDATASET.methods_by_name['GetGeneMetadata']._serialized_options = b'\302\360\031\260\t\n\234\002\010\001\022\026/v1/gene/id/{gene_ids}\032\033/v1alpha/gene/id/{gene_ids}*\033Get gene metadata by GeneID2=Get detailed gene metadata by GeneID in a JSON output format.:\023gene_metadata_by_idB\004GeneJ\027symbols_for_taxon.taxonJ\031symbols_for_taxon.symbolsJ\naccessionsJ\005taxonJ\027include_annotation_typeJ\014fasta_filter\n\307\002\010\001\022\037/v1/gene/accession/{accessions}\032$/v1alpha/gene/accession/{accessions}*%Get gene metadata by RefSeq Accession2GGet detailed gene metadata by RefSeq Accession in a JSON output format.:\032gene_metadata_by_accessionB\004GeneJ\027symbols_for_taxon.taxonJ\031symbols_for_taxon.symbolsJ\010gene_idsJ\005taxonJ\027include_annotation_typeJ\014fasta_filter\n\271\003\010\001\022K/v1/gene/symbol/{symbols_for_taxon.symbols}/taxon/{symbols_for_taxon.taxon}\032P/v1alpha/gene/symbol/{symbols_for_taxon.symbols}/taxon/{symbols_for_taxon.taxon}* Get gene metadata by gene symbol2BGet detailed gene metadata by gene symbol in a JSON output format.:\037gene_metadata_by_tax_and_symbolB\004GeneJ\taccessionJ\010gene_idsJ\005taxonJ\027include_annotation_typeJ\014fasta_filterR$\n\031symbols_for_taxon.symbols\022\007symbolsR \n\027symbols_for_taxon.taxon\022\005taxon\n\210\001\010\002\022\010/v1/gene\032\r/v1alpha/gene*\031Get gene metadata as JSON23Get detailed gene metadata in a JSON output format.:\025gene_metadata_by_postB\004Gene'
  _GENEDATASET.methods_by_name['StreamGeneMetadata']._options = None
  _GENEDATASET.methods_by_name['StreamGeneMetadata']._serialized_options = b'\302\360\031\312\001\n\307\001\010\002\022\017/v1/gene/stream\032\024/v1alpha/gene/stream*\021Get gene metadata2DGet detailed gene metadata in a streaming, JSON-lines output format.:\034gene_metadata_stream_by_postB\004GeneZ\tGeneMatchr\024application/x-ndjson'
  _GENEDATASET.methods_by_name['GetDownloadSummary']._options = None
  _GENEDATASET.methods_by_name['GetDownloadSummary']._serialized_options = b'\302\360\031\331\016\n\244\003\010\001\022\'/v1/gene/id/{gene_ids}/download_summary\032#/v1alpha/gene/id/{gene_ids}/summary\032,/v1alpha/gene/id/{gene_ids}/download_summary*#Get gene download summary by GeneID29Get a download summary by GeneID in a JSON output format.:\033gene_download_summary_by_idB\004GeneJ\027include_annotation_typeJ\027symbols_for_taxon.taxonJ\031symbols_for_taxon.symbolsJ\025sort_schema.directionJ\021sort_schema.fieldJ\naccessionsJ\020returned_contentJ\005taxonJ\005limit\n\212\004\010\001\0220/v1/gene/accession/{accessions}/download_summary\032-/v1alpha/gene/accessions/{accessions}/summary\032,/v1alpha/gene/accession/{accessions}/summary\0325/v1alpha/gene/accession/{accessions}/download_summary*-Get gene download summary by RefSeq Accession2FGet gene download summary by RefSeq Accession in a JSON output format.:\"gene_download_summary_by_accessionB\004GeneJ\027include_annotation_typeJ\027symbols_for_taxon.taxonJ\031symbols_for_taxon.symbolsJ\025sort_schema.directionJ\021sort_schema.fieldJ\010gene_idsJ\020returned_contentJ\005taxonJ\005limit\n\327\005\010\001\022\\/v1/gene/symbol/{symbols_for_taxon.symbols}/taxon/{symbols_for_taxon.taxon}/download_summary\032[/v1alpha/gene/symbol/{symbols_for_taxon.symbols}/taxonomy/{symbols_for_taxon.taxon}/summary\032X/v1alpha/gene/symbol/{symbols_for_taxon.symbols}/taxon/{symbols_for_taxon.taxon}/summary\032a/v1alpha/gene/symbol/{symbols_for_taxon.symbols}/taxon/{symbols_for_taxon.taxon}/download_summary*(Get gene download summary by gene symbol2AGet gene download summary by gene symbol in a JSON output format.:\'gene_download_summary_by_tax_and_symbolB\004GeneJ\027include_annotation_typeJ\010gene_idsJ\naccessionsJ\020returned_contentJ\025sort_schema.directionJ\021sort_schema.fieldJ\005taxonJ\005limitR$\n\031symbols_for_taxon.symbols\022\007symbolsR \n\027symbols_for_taxon.taxon\022\005taxon\n\310\001\010\002\022\031/v1/gene/download_summary\032\025/v1alpha/gene/summary\032\036/v1alpha/gene/download_summary*\031Get gene download summary22Get gene download summary in a JSON output format.:\035gene_download_summary_by_postB\004Gene'
  _GENEDATASET.methods_by_name['GetOrthologSet']._options = None
  _GENEDATASET.methods_by_name['GetOrthologSet']._serialized_options = b'\302\360\031\333\001\n\330\001\010\001\022\037/v1/gene/id/{gene_id}/orthologs\032$/v1alpha/gene/id/{gene_id}/orthologs*\035Get gene orthologs by gene ID2RGet detailed gene metadata for an ortholog set by gene ID in a JSON output format.:\024gene_orthologs_by_idB\004Gene'
  _GENEDATASET.methods_by_name['GetTaxTree']._options = None
  _GENEDATASET.methods_by_name['GetTaxTree']._serialized_options = b'\302\360\031\215\002\n\212\002\010\001\022\033/v1/gene/taxon/{taxon}/tree\032 /v1alpha/gene/taxon/{taxon}/tree*/Get a taxonomic subtree by taxonomic identifier2\200\001Using an NCBI Taxonomy ID or name (common or scientific) at any rank, get a subtree filtered for species with assembled genomes.:\rgene_tax_treeB\004Gene'
  _GENEDATASET.methods_by_name['GetOrganismsThatMatch']._options = None
  _GENEDATASET.methods_by_name['GetOrganismsThatMatch']._serialized_options = b'\302\360\031\202\003\n\377\002\010\001\022$/v1/gene/taxon_suggest/{taxon_query}\0320/v1alpha/gene/tax_name_query/{taxon_query}/names\032)/v1alpha/gene/taxon_suggest/{taxon_query}*]Get a list of taxonomy names and IDs found in the gene dataset given a partial taxonomic name2~This endpoint retrieves a list of taxonomy names and IDs found in the gene dataset given a partial taxonomic name of any rank.:\023gene_tax_name_queryB\004Gene'
  _VIRUSDATASET.methods_by_name['GetDownloadSummary']._options = None
  _VIRUSDATASET.methods_by_name['GetDownloadSummary']._serialized_options = b'\302\360\031\202\010\n\371\002\010\001\022\036/v1/virus/taxon/{taxon}/genome\032%/v1alpha/virus/summary/taxid/{tax_id}\032*/v1alpha/virus/summary/organism/{tax_name}\032#/v1alpha/virus/taxon/{taxon}/genome*3Get summary data for Coronaviridae genomes by taxon2^Get summary data and download by command line instructions for Coronaviridae genomes by taxon.:\024virus_genome_summaryB\005VirusJ\taccessionJ\naccessionsJ\014table_fieldsJ\006format\n\376\001\010\001\022\'/v1/virus/accession/{accessions}/genome*7Get summary data for Coronaviridae genomes by accession27Get summary data for Coronaviridae genomes by accession:\036virus_genome_summary_accessionB\005VirusJ\005taxonJ\006tax_idJ\010tax_nameJ\taccessionJ\014table_fieldsJ\006format\n\202\003\010\002\022\020/v1/virus/genome*2Get summary data for Coronaviridae genomes by post2\333\001The \'GET\' version is limited by the size of the GET URL (2KB, which works out to about 140 genomic accessions).  The POST operation is provided to allow users to supply a larger number of accessions in a single request.:\031virus_genome_summary_postB\005VirusJ\005taxonJ\006tax_idJ\010tax_nameJ\taccessionJ\014table_fieldsJ\006format'
  _VIRUSDATASET.methods_by_name['GetSars2ProteinDownloadSummary']._options = None
  _VIRUSDATASET.methods_by_name['GetSars2ProteinDownloadSummary']._serialized_options = b'\302\360\031\322\002\n\317\002\010\001\022(/v1/virus/taxon/sars2/protein/{proteins}\032//v1alpha/virus/summary/sars2/protein/{proteins}\032-/v1alpha/virus/taxon/sars2/protein/{proteins}*>Summary of SARS-CoV-2 protein and CDS datasets by protein name2;Download a summary of available SARS-CoV-2 protein datasets:\025sars2_protein_summaryB\005VirusJ\020exclude_sequenceJ\014table_fieldsJ\006format'
  _VIRUSDATASET.methods_by_name['GetVirusGenomeMetadataAsTable']._options = None
  _VIRUSDATASET.methods_by_name['GetVirusGenomeMetadataAsTable']._serialized_options = b'\302\360\031\266\002\n\263\002\010\001\022$/v1/virus/taxon/{taxon}/genome/table\032)/v1alpha/virus/taxon/{taxon}/genome/table*/Get viral genomic metadata in a tabular format.2PGet viral genomic metadata in tabular format for Coronaviridae genomes by taxon.:\022virus_genome_tableB\005VirusJ\020exclude_sequenceJ\027include_annotation_typeJ\taccessionJ\naccessions'
  _VIRUSDATASET.methods_by_name['GetSars2ProteinMetadataAsTable']._options = None
  _VIRUSDATASET.methods_by_name['GetSars2ProteinMetadataAsTable']._serialized_options = b'\302\360\031\247\002\n\244\002\010\001\022./v1/virus/taxon/sars2/protein/{proteins}/table\0323/v1alpha/virus/taxon/sars2/protein/{proteins}/table*4Get SARS-CoV-2 protein metadata in a tabular format.2>Get protein metadata in tabular format for SARS-CoV-2 genomes.:\023sars2_protein_tableB\005VirusJ\020exclude_sequenceJ\027include_annotation_type'
  _VIRUSDATASET.methods_by_name['GetVirusDataReports']._options = None
  _VIRUSDATASET.methods_by_name['GetVirusDataReports']._serialized_options = b'\302\360\031\304\010\n\203\003\010\001\022-/v1/virus/taxon/{filter.taxon}/dataset_report*\033Get virus metadata by taxon2\224\001Get virus metadata by taxon. By default, in paged JSON format, but also available as tabular (accept: x-tabular) or json-lines (accept: x-jsonlines):\026virus_reports_by_taxonB\005VirusJ\021filter.accessionsJ\014table_formatR\025\n\014filter.taxon\022\005taxonZ\026v1reportsVirusAssemblyh\001r\020application/jsonr\031text/tab-separated-values\n\234\003\010\001\0226/v1/virus/accession/{filter.accessions}/dataset_report*\037Get virus metadata by accession2\227\001Get virus metadata by accesion. By default, in paged JSON format, but also available as tabular (accept: x-tabular) or json-lines (accept: x-jsonlines):\032virus_reports_by_acessionsB\005VirusJ\014filter.taxonJ\014table_formatR\037\n\021filter.accessions\022\naccessionsZ\026v1reportsVirusAssemblyh\001r\020application/jsonr\031text/tab-separated-values\n\234\002\010\002\022\t/v1/virus*\032Get virus metadata by POST2\213\001Get virus metadata. By default, in paged JSON format, but also available as tabular (accept: x-tabular) or json-lines (accept: x-jsonlines):\025virus_reports_by_postB\005VirusZ\026v1reportsVirusAssemblyh\001r\020application/jsonr\031text/tab-separated-values'
  _VIRUSDATASET.methods_by_name['CheckVirusAvailability']._options = None
  _VIRUSDATASET.methods_by_name['CheckVirusAvailability']._serialized_options = b'\302\360\031\306\002\n\250\001\010\001\022&/v1/virus/accession/{accessions}/check*(Check available viruses by accession GET2\033Check available viruses GET:\034virus_accession_availabilityB\005Virusr\020application/json\n\230\001\010\002\022\017/v1/virus/check*)Check available viruses by accession POST2\034Check available viruses POST:!virus_accession_availability_postB\005Virusr\020application/json'
  _HTTPDATAFILE.methods_by_name['Fetch']._options = None
  _HTTPDATAFILE.methods_by_name['Fetch']._serialized_options = b'\302\360\0312\n0\010\001\"\033/fetch_h/{method}/{payload}r\017application/zip'
  _TAXONOMYDATASET.methods_by_name['GetTaxonomyMetadataFor']._options = None
  _TAXONOMYDATASET.methods_by_name['GetTaxonomyMetadataFor']._serialized_options = b'\302\360\031\230\005\n\312\002\010\001\022\033/v1/taxonomy/taxon/{taxons}*3Use taxonomic identifiers to get taxonomic metadata2\326\001Using NCBI Taxonomy IDs or names (common or scientific) at any rank, get metadata about a taxonomic node including taxonomic identifiers, lineage information, child nodes, and gene and genome counts in JSON format.:\021taxonomy_metadataB\010Taxonomy\n\310\002\010\002\022\014/v1/taxonomy*;Use taxonomic identifiers to get taxonomic metadata by post2\326\001Using NCBI Taxonomy IDs or names (common or scientific) at any rank, get metadata about a taxonomic node including taxonomic identifiers, lineage information, child nodes, and gene and genome counts in JSON format.:\026taxonomy_metadata_postB\010Taxonomy'
  _TAXONOMYDATASET.methods_by_name['GetMinimumFilteredSubtree']._options = None
  _TAXONOMYDATASET.methods_by_name['GetMinimumFilteredSubtree']._serialized_options = b'\302\360\031\342\005\n\357\002\010\001\022,/v1/taxonomy/taxon/{taxons}/filtered_subtree*=Use taxonomic identifiers to get a filtered taxonomic subtree2\330\001Using NCBI Taxonomy IDs or names (common or scientific) at any rank, get a filtered taxonomic subtree that includes the full parent lineage and all immediate children from the selected taxonomic ranks in JSON format.:\031taxonomy_filtered_subtreeB\010Taxonomy\n\355\002\010\002\022\035/v1/taxonomy/filtered_subtree*EUse taxonomic identifiers to get a filtered taxonomic subtree by post2\330\001Using NCBI Taxonomy IDs or names (common or scientific) at any rank, get a filtered taxonomic subtree that includes the full parent lineage and all immediate children from the selected taxonomic ranks in JSON format.:\036taxonomy_filtered_subtree_postB\010Taxonomy'
  _TAXONOMYDATASET.methods_by_name['GetOrganismsThatMatch']._options = None
  _TAXONOMYDATASET.methods_by_name['GetOrganismsThatMatch']._serialized_options = b'\302\360\031\364\001\n\361\001\010\001\022(/v1/taxonomy/taxon_suggest/{taxon_query}*CGet a list of taxonomy names and IDs given a partial taxonomic name2dThis endpoint retrieves a list of taxonomy names and IDs given a partial taxonomic name of any rank.:\016tax_name_queryB\010Taxonomy'
  _GATEWAY.methods_by_name['Version']._options = None
  _GATEWAY.methods_by_name['Version']._serialized_options = b'\302\360\031\207\001\n\204\001\010\001\022\013/v1/version\032\020/v1alpha/version*\030Retrieve service version25Retrieve the latest version of the Datasets services.:\007versionB\007Version'
  _ASSEMBLYDATASET._serialized_start=231
  _ASSEMBLYDATASET._serialized_end=2730
  _VIRUSDOWNLOAD._serialized_start=2733
  _VIRUSDOWNLOAD._serialized_end=4555
  _DATASETDOWNLOAD._serialized_start=4558
  _DATASETDOWNLOAD._serialized_end=8833
  _GENEDATASET._serialized_start=8836
  _GENEDATASET._serialized_end=14055
  _VIRUSDATASET._serialized_start=14058
  _VIRUSDATASET._serialized_end=18165
  _HTTPDATAFILE._serialized_start=18168
  _HTTPDATAFILE._serialized_end=18319
  _TAXONOMYDATASET._serialized_start=18322
  _TAXONOMYDATASET._serialized_end=20353
  _GATEWAY._serialized_start=20356
  _GATEWAY._serialized_end=20576
# @@protoc_insertion_point(module_scope)
